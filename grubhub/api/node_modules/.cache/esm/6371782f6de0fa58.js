let express,Promise,passport,userService;_6de‍.x([["default",()=>_6de‍.o]]);_6de‍.w("express",[["default",["express"],function(v){express=v}]]);_6de‍.w("bluebird",[["default",["Promise"],function(v){Promise=v}]]);_6de‍.w("passport",[["default",["passport"],function(v){passport=v}]]);_6de‍.w("./user.service",[["*",null,function(v){userService=v}]]);



const userRouter = express.Router();

userRouter.post("/register", passport.authenticate("register"), (req, res) => {
  const userDetails = req.body;
  return userService
    .registerUser(userDetails)
    .then(result => {
      res.cookie("grubhubCookie", result.token, {
        maxAge: 900000,
        httpOnly: false
      });
      res.status(200).json(result);
    })
    .catch(err => {
      res.status(500).json(err);
    });
});

userRouter.post("/login", passport.authenticate("login"), (req, res) => {
  const userCredentials = req.body;
  return userService
    .loginUser(userCredentials)
    .then(result => {
      _6de‍.g.console.log(result);
      res.cookie("grubhubCookie", result.token, {
        maxAge: 900000,
        httpOnly: false
      });
      res.status(200).json(result);
    })
    .catch(err => {
      res.status(500).json(err);
    });
});

userRouter.put("/update/:user_id", (req, res) => {
  const userDetails = req.body;
  userDetails.user_id = req.params.user_id;
  return userService
    .updateUser(userDetails)
    .then(result => {
      res.status(200).json(result);
    })
    .catch(err => {
      res.status(500).json(err);
    });
});
_6de‍.d(userRouter);
