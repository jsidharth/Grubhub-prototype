let Orders,Users,Restaurants,Items,Items_Order;_6c1‍.x([["getOrdersByRestaurant",()=>getOrdersByRestaurant],["updateOrder",()=>updateOrder],["getOrderDetails",()=>getOrderDetails]]);_6c1‍.w("./../../../sequelize",[["Orders",["Orders"],function(v){Orders=v}],["Users",["Users"],function(v){Users=v}],["Restaurants",["Restaurants"],function(v){Restaurants=v}],["Items",["Items"],function(v){Items=v}],["Items_Order",["Items_Order"],function(v){Items_Order=v}]]);

const getOrdersByRestaurant = restaurant_id => {
  return Orders.findAll({
    where: {
      restaurant_id
    }
  }).then(allOrders => {
    let current_orders, past_orders;
    current_orders = allOrders.filter(order =>
      ["NEW", "PREPARING", "READY"].includes(order.status)
    );
    past_orders = allOrders.filter(order =>
      ["DELIVERED", "CANCELLED"].includes(order.status)
    );
    return {
      current_orders,
      past_orders
    };
  });
};

const updateOrder = order_details => {
  return Orders.findOne({
    where: {
      id: order_details.id
    }
  }).then(order => {
    return order.update({
      status: order_details.status
    }).then(() => {
      return getOrdersByRestaurant(order.restaurant_id)
    })
  })
}

const getOrderDetails = (order_id) => {
  return Orders.findOne({
    where: {
      id: order_id
    },
    include: [
      {
        model: Users
      },
      {
        model: Restaurants
      }
    ]
  }).then(order => {
    _.omit(order, [user_id, restaurant_id]);
    return Items_Order.findAll({
      where: {
        order_id: order.id
      },
      include: [
        {
          model: Items
        }
      ]
    }).then(allItems => {
      _6c1‍.g.console.log(allItems)
    })
  })
}


