let Sequelize,UserModel,RestaurantModel,OrderModel,itemModel,itemOrderModel;_5fe‍.x([["Users",()=>Users],["Restaurants",()=>Restaurants],["Orders",()=>Orders],["Items",()=>Items],["Items_Order",()=>Items_Order]]);_5fe‍.w("sequelize",[["default",["Sequelize"],function(v){Sequelize=v}]]);_5fe‍.w("./api/modules/user/user.model",[["default",["UserModel"],function(v){UserModel=v}]]);_5fe‍.w("./api/modules/restaurant/restaurant.model",[["default",["RestaurantModel"],function(v){RestaurantModel=v}]]);_5fe‍.w("./api/modules/order/order.model",[["default",["OrderModel"],function(v){OrderModel=v}]]);_5fe‍.w("./api/modules/item/item.model",[["itemModel",["itemModel"],function(v){itemModel=v}],["itemOrderModel",["itemOrderModel"],function(v){itemOrderModel=v}]]);





const sequelize = new Sequelize('grubhub', 'root', 'root123', {
    host: 'localhost',
    dialect: 'mysql'
});

//Table creations
const Users = UserModel(sequelize, Sequelize);
const Restaurants = RestaurantModel(sequelize, Sequelize);
const Orders = OrderModel(sequelize, Sequelize);
const Items = itemModel(sequelize, Sequelize);
const Items_Order = itemOrderModel(sequelize, Sequelize);

//Associations
Orders.belongsTo(Users);
Orders.belongsTo(Restaurants);
Items_Order.belongsTo(Orders);
Items_Order.belongsTo(Items);

sequelize.sync()
.then(()=>{
    console.log('Tables created successfully');
}).catc(err => {
    _5fe‍.g.console.log('Error while table creation', err.message);
})







