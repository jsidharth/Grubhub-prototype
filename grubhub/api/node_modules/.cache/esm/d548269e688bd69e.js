let bcrypt,Users;_688‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_688‍.w("../src/sequelize",[["Users",["Users"],function(v){Users=v}]]);

const passport = require("passport"),
  localStrategy = require("passport-local").Strategy,
  JWTStrategy = require("passport-jwt");

const SALT_ROUND = 10;

passport.serializeUser(function(user, done) {
  done(null, user);
});

passport.deserializeUser(function(user, done) {
  done(null, user);
});

passport.use(
  "register",
  new localStrategy(
    {
      usernameField: "email",
      passwordField: "password"
    },
    (username, password, done) => {
      try {
        Users.findOne({
          where: {
            email: username
          }
        }).then(user => {
          if (user !== null) {
            return done(null, false);
          } else {
            bcrypt.hash(password, SALT_ROUND).then(hashPassword => {
              _688‍.g.console.log("Here pass", hashPassword);
              Users.create({
                email: username,
                password: hashPassword
              }).then(user => {
                return done(null, true);
              });
            });
          }
        });
      } catch (err) {
        done(err);
      }
    }
  )
);

passport.use(
  "login",
  new localStrategy(
    {
      usernameField: "email",
      passwordField: "password",
      session: false
    }, (username, password, done) => {
      try {
        Users.findOne({
          where: {
            email: username
          }
        }).then(user => {
          if(!user) {
            return done(null, false)
          } else {
            bcrypt.compare(password, user.password).then(result => {
              if(!result) {
                console.log("Password mismatch");
                return done(null, false);
              }
               return done(null, true);
            })
          }
        })
      } catch(err) {
        done(err);
      }
    }
  )
);

passport.use('')